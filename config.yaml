# Copyright 2022 pietro
# See LICENSE file for licensing details.

options:
  rule:
    default:
    description: >
      A Traefik routing rule, see https://doc.traefik.io/traefik/routing/routers/ for
      an overview.

      The value of the field is going to be processed as a Jinja2 template, with the
      following globals available:
       - {{juju_model}} resolves to the model name of the downstream proxied 
         application.
       - {{juju_application}} resolves to the application name of the downstream 
         proxied application.
       - {{juju_unit}} resolves to the unit name of the downstream proxied unit;
         to avoid issues when used together with the Host directive or similar, 
         the slash character between application name and unit index is replaced by a dash.

      For example, given a downstream unit called `prometheus/0` in the `cos` model, the following:

        Host(`foo.bar/{{juju_unit}}-{{juju_model}}`)

      would evaluate to:

        Host(`foo.bar/cos-prometheus-0`)
      
      If the host is omitted, but the root_url is provided, the charm will 
      extract the hostname from the url and generate a Host rule for you.
        root_url=`http://{{juju_unit}}.bar.baz:80/qux`
        --> rule=Host(`{{juju_unit}}.bar.baz`)

    type: string

  root_url:
    default:
    description: >
      The url to advertise to the unit in need of ingress.

      The value of the field is going to be processed in exactly the same way as
      the `rule` field. The assumption is that the url is going to match
      the rule; however, we have no way to validate and/or enforce this condition;
      so beware!
      For example, given a downstream unit called `prometheus/0` in the `cos` model, the 
      following configuration is valid:

        rule="Host(`{{juju_unit}}.{{juju_model}}.foo.bar`)"
        root_url="http://{{juju_unit}}.{{juju_model}}.foo.bar/baz"
      
      while the following configuration is not:
      
        rule="Host(`{{juju_model}}-{{juju_unit}}.foo.bar`) || 
             HostRegexp(`{subdomain:[a-z]+}.foo.bar`) || 
             Host(`doobadooba.com`)"
        root_url="ka-ching.com"
      
      The reason why this is not valid is that the url does not match the rule:
      so the url advertised to the unit will not in fact be routed correctly by Traefik.
      Note that Traefik will still work 'correctly', i.e. the application will be 
      reachable at (for example) `http://doobadooba.com`.
      Examples of 'good' root_url values for this case would be:
      
        root_url="{{juju_model}}-{{juju_unit}}.foo.bar/baz"
        root_url="baz.foo.bar" 
        root_url="doobadooba.com/choo" 
      
    type: string

  strip_prefix:
    default:
    description: >
      The prefix to strip from the route being forwarded to the app 
      requesting ingress.
      
      If provided, it will configure Traefik with a `stripprefix`-type middleware
      (Traefik will add a `X-Forwarded-Prefix: [strip_prefix]` header to
      the forwarded requests).
      For documentation see: https://doc.traefik.io/traefik/migration/v1-to-v2/#strip-and-rewrite-path-prefixes
      
      Example usage:
      suppose you have configured route with:
        
        root_url="{{juju_model}}-{{juju_unit}}.foo.bar/baz"
        rule="PathPrefix(`/baz`)"
        
      adding
        
        strip_prefix="baz"
      
      will strip the prefix `/baz` from the requests forwarded by Traefik.
    type: string
